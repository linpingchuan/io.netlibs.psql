package io.netlibs.psql;

import io.netlibs.psql.wire.CommandComplete;
import io.netlibs.psql.wire.DataRow;
import io.netlibs.psql.wire.EmptyQueryResponse;
import io.netlibs.psql.wire.ErrorResponse;
import io.netlibs.psql.wire.NoticeResponse;
import io.netlibs.psql.wire.ReadyForQuery;
import io.netlibs.psql.wire.RowDescription;

/**
 * receives associated packets after a Query FE message is sent.
 * 
 * @see http://www.postgresql.org/docs/9.5/static/protocol-flow.html#AEN108664
 * 
 *      The response to a SELECT query (or other queries that return row sets, such as EXPLAIN or SHOW) normally consists of RowDescription,
 *      zero or more DataRow messages, and then CommandComplete. COPY to or from the frontend invokes special protocol as described in
 *      Section 50.2.5. All other query types normally produce only a CommandComplete message.
 * 
 *      Since a query string could contain several queries (separated by semicolons), there might be several such response sequences before
 *      the backend finishes processing the query string. ReadyForQuery is issued when the entire string has been processed and the backend
 *      is ready to accept a new query string.
 * 
 *      If a completely empty (no contents other than whitespace) query string is received, the response is EmptyQueryResponse followed by
 *      ReadyForQuery.
 * 
 *      In the event of an error, ErrorResponse is issued followed by ReadyForQuery. All further processing of the query string is aborted
 *      by ErrorResponse (even if more queries remained in it). Note that this might occur partway through the sequence of messages
 *      generated by an individual query.
 * 
 *      In simple Query mode, the format of retrieved values is always text, except when the given command is a FETCH from a cursor declared
 *      with the BINARY option. In that case, the retrieved values are in binary format. The format codes given in the RowDescription
 *      message tell which format is being used.
 * 
 *      A frontend must be prepared to accept ErrorResponse and NoticeResponse messages whenever it is expecting any other type of message.
 *      See also Section 50.2.6 concerning messages that the backend might generate due to outside events.
 * 
 * @author theo
 *
 */

public interface QueryListener
{
  
  /**
   * The row description.
   */

  void description(RowDescription e);

  /**
   * A row has been received.
   */

  void row(DataRow e);

  /**
   * The query just contained an empty string.
   */

  void emptyResponse(EmptyQueryResponse e);

  /**
   * An error occured processing the query.
   */

  void error(ErrorResponse e);

  /**
   * A notice associated with the query.
   */

  void notice(NoticeResponse e);

  /**
   * A single command within the query has been completed.
   */

  void commandComplete(CommandComplete e);

  /**
   * The whole Query has been processed.
   */

  void readyForQuery(ReadyForQuery e);

}
